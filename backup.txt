
/*
// Function to grant speed boosts to ghosts
void grantSpeedBoost(GhostData& ghost) 
{
    // Try to acquire the speed boost semaphore
    if (sem_trywait(&speedBoostSemaphore) == 0) {
        // Speed boost granted
        ghost.speed = 1;
        //cout<<"Speed Boost granted to ghost "<< ghost.ghostID <<endl;
         ghost.speedClock.restart();
    } else {
        // No speed boosts available
        // Ghost continues with normal speed
    }
}
// Function to update the speed boost status of a ghost
void updateSpeedBoost(GhostData& ghost) 
{
    // Check if the speed boost is active and has expired (5 seconds duration)
    if (ghost.speed && ghost.speedClock.getElapsedTime().asSeconds() >= 10) {
        // Speed boost has expired, release semaphore and reset speed
        sem_post(&speedBoostSemaphore);
        ghost.speed = 0;
        //cout<<"Speed Boost expired for ghost "<< ghost.ghostID <<endl;
    }
}
*/
/*
int bfs_shortest_distance(int grid[][30], pair<int, int> start_pos, pair<int, int> end_pos, pair<int, int> called_pos)
{
    int rows = 30;
    int cols = 30;
    // cout<<"start_pos"<<start_pos.first<<" "<<start_pos.second<<endl;
    // vector<vector<bool>> visited(rows, vector<bool>(cols, false));
    bool visited[30][30];
    // vector<vector<int>> distance(rows, vector<int>(cols, INT_MAX)); // Initialize distances to infinity
    int distance[30][30];
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            if (grid[i][j] == 1 || grid[i][j] == -1)
            {
                visited[i][j] = true;
                distance[i][j] = 0;
            }
            else
            {
                visited[i][j] = false;
                distance[i][j] = INT_MAX;
            }
        }
    }

    queue<pair<int, int>> q;
    q.push(start_pos);
    visited[start_pos.first][start_pos.second] = true;
    visited[called_pos.first][called_pos.second] = true;
    distance[start_pos.first][start_pos.second] = 0;
    distance[called_pos.first][called_pos.second] = 0;

    int dr[] = {-1, 1, 0, 0};
    int dc[] = {0, 0, -1, 1};

    while (!q.empty())
    {
        pair<int, int> current_pos = q.front();
        q.pop();
        if (current_pos == end_pos)
        {
            return distance[current_pos.first][current_pos.second]; // Return distance when destination is reached
        }

        for (int j = 0; j < 4; ++j)
        {
            int new_row = current_pos.first + dr[j];
            int new_col = current_pos.second + dc[j];
            // cout<<new_row<<" "<<new_col<<endl;
            // cout<<visited[new_row][new_col]<<endl;
            if (new_row > 0 && new_row < rows && new_col > 0 && new_col < cols && (grid[new_row][new_col] == 2 || grid[new_row][new_col] == 0) && !visited[new_row][new_col])
            {
                visited[new_row][new_col] = true;
                distance[new_row][new_col] = distance[current_pos.first][current_pos.second] + 1;
                q.push({new_row, new_col});
            }
        }
    }

    return INT_MAX; // No path found
}

bool isValid(int row, int col, vector<vector<int>> &grid)
{
    return (row >= 0 && col >= 0 && (grid[row][col] == 2 || grid[row][col] == 0));
}

int bfs_encountered_positions(int grid[][30], pair<int, int> start_pos, pair<int, int> end_pos)
{
    int rows = 30;
    int cols = 30;
    vector<vector<bool>> visited(rows, vector<bool>(cols, false));
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            if (grid[i][j] == 1 || grid[i][j] == -1)
                visited[i][j] = true;
        }
    }

    queue<pair<int, int>> q;
    q.push(start_pos);
    visited[start_pos.first][start_pos.second] = true;

    int encountered_positions = 0;

    while (!q.empty())
    {
        pair<int, int> current_pos = q.front();
        q.pop();

        // Check if we've reached the end position
        if (current_pos == end_pos)
        {
            return encountered_positions;
        }

        // Define the directions (up, down, left, right)
        int dr[] = {-1, 1, 0, 0};
        int dc[] = {0, 0, -1, 1};

        // Explore neighbors
        for (int i = 0; i < 4; ++i)
        {
            int new_row = current_pos.first + dr[i];
            int new_col = current_pos.second + dc[i];
            if (new_row > 0 && new_row < rows && new_col > 0 && new_col < cols &&
                (grid[new_row][new_col] == 2 || grid[new_row][new_col] == 0) && !visited[new_row][new_col])
            {
                visited[new_row][new_col] = true;
                // Increment the encountered positions count
                encountered_positions++;
                q.push({new_row, new_col});
            }
        }
    }

    // If end position is not reached, return -1
    return INT_MAX;
}

int shortestPath(int startX, int startY, int destX, int destY, int gameMap[ROWS][COLS])
{
    bool visited[ROWS][COLS] = {false};
    std::queue<std::pair<int, int>> q;
    q.push({startX, startY});
    visited[startX][startY] = true;

    int dx[] = {0, 0, 1, -1};
    int dy[] = {1, -1, 0, 0};
    int dist[ROWS][COLS] = {0}; // Store distances from start position

    while (!q.empty())
    {
        int x = q.front().first;
        int y = q.front().second;
        q.pop();

        // Check if destination is reached
        if (x == destX && y == destY)
        {
            return dist[x][y];
        }

        // Explore adjacent cells
        for (int i = 0; i < 4; ++i)
        {
            int newX = x + dx[i];
            int newY = y + dy[i];

            // Check validity and unvisited status
            if (isValid(newX, newY, gameMap) && !visited[newX][newY])
            {
                q.push({newX, newY});
                visited[newX][newY] = true;
                dist[newX][newY] = dist[x][y] + 1; // Update distance
            }
        }
    }

    // If destination is unreachable
    return INT_MAX;
}

void *ghostController3(void *arg)
{
    GhostData *ghost = (GhostData *)arg;
    while (true)
    {
        cout << ghost->x << " " << ghost->y << endl;
        int current_posx = ghost->x;
        int current_posy = ghost->y;

        int shortest_distance1 = 222220;
        int shortest_distance2 = 222220;
        int shortest_distance3 = 222220; // usleep(200000); // Adjust the sleep duration as needed

        int shortest_distance4 = 222220;
        if (gameMap[current_posy / CELL_SIZE][((current_posx) / CELL_SIZE) + 1] == 0 || gameMap[current_posy / CELL_SIZE][((current_posx) / CELL_SIZE) + 1] == 2)
        {
            // cout<<current_posx / CELL_SIZE + 1<<" "<<endl;
            // cout<<"Grid val"<<gameMap[current_posy / CELL_SIZE][((current_posx ) / CELL_SIZE)+1]<<endl;
            // pair<int, int> start_pos = {current_posx / CELL_SIZE + 1 , (current_posy/ CELL_SIZE)};
            // pair<int, int> called_pos = {current_posx / CELL_SIZE , (current_posy/ CELL_SIZE)};
            // pair<int, int> end_pos = {pacman_x/CELL_SIZE, pacman_y/CELL_SIZE};

            // shortest_distance1 = bfs_shortest_distance(gameMap, start_pos, end_pos, called_pos);
            // shortest_distance1 = bfs_encountered_positions(gameMap, start_pos, end_pos);
            // cout<<"right"<<endl;
            int startX = ghost->x / CELL_SIZE + 1;
            int startY = ghost->y / CELL_SIZE;
            int destX = pacman_x / CELL_SIZE;
            int destY = pacman_y / CELL_SIZE;
            shortest_distance1 = shortestPath(startX, startY, destX, destY, gameMap);
        }
        if (gameMap[current_posy / CELL_SIZE][current_posx / CELL_SIZE - 1] == 0 || gameMap[current_posy / CELL_SIZE][current_posx / CELL_SIZE - 1] == 2)
        {
            // pair<int, int> start_pos = {current_posx / CELL_SIZE -1, (current_posy/ CELL_SIZE)};
            // pair<int, int> end_pos = {pacman_x/CELL_SIZE, pacman_y/CELL_SIZE};
            // pair<int, int> called_pos = {current_posx / CELL_SIZE , (current_posy/ CELL_SIZE)};
            // shortest_distance2 = bfs_shortest_distance(gameMap, start_pos, end_pos, called_pos);
            // shortest_distance2 = bfs_encountered_positions(gameMap, start_pos, end_pos);
            cout << "lrft" << endl;

            int startX = ghost->x / CELL_SIZE - 1;
            int startY = ghost->y / CELL_SIZE;
            int destX = pacman_x / CELL_SIZE;
            int destY = pacman_y / CELL_SIZE;
            shortest_distance2 = shortestPath(startX, startY, destX, destY, gameMap);
        }
        if (gameMap[current_posy / CELL_SIZE - 1][(current_posx) / CELL_SIZE] == 0 || gameMap[current_posy / CELL_SIZE - 1][(current_posx) / CELL_SIZE] == 2)
        {

            // pair<int, int> start_pos = {(current_posx / CELL_SIZE), ((current_posy )/ CELL_SIZE - 1)};
            // pair<int, int> end_pos = {pacman_x/CELL_SIZE, pacman_y/CELL_SIZE};
            // pair<int, int> called_pos = {current_posx / CELL_SIZE , (current_posy/ CELL_SIZE)};
            // shortest_distance3 = bfs_shortest_distance(gameMap, start_pos, end_pos,called_pos);
            // shortest_distance3 = bfs_encountered_positions(gameMap, start_pos, end_pos);
            cout << "up" << endl;
            int startX = ghost->x / CELL_SIZE;
            int startY = ghost->y / CELL_SIZE - 1;
            int destX = pacman_x / CELL_SIZE;
            int destY = pacman_y / CELL_SIZE;
            shortest_distance3 = shortestPath(startX, startY, destX, destY, gameMap);
        }
        if (gameMap[current_posy / CELL_SIZE + 1][(current_posx) / CELL_SIZE] == 0 || gameMap[current_posy / CELL_SIZE + 1][(current_posx) / CELL_SIZE] == 2)
        {
            // pair<int, int> start_pos = {(current_posx / CELL_SIZE), ((current_posy)/ CELL_SIZE) + 1};
            // pair<int, int> end_pos = {pacman_x/CELL_SIZE, pacman_y/CELL_SIZE};
            // pair<int, int> called_pos = {current_posx / CELL_SIZE , (current_posy/ CELL_SIZE)};

            // shortest_distance4 = bfs_shortest_distance(gameMap, start_pos, end_pos, called_pos);
            // shortest_distance4 = bfs_encountered_positions(gameMap, start_pos, end_pos);
            cout << "down" << endl;
            int startX = ghost->x / CELL_SIZE;
            int startY = ghost->y / CELL_SIZE + 1;
            int destX = pacman_x / CELL_SIZE;
            int destY = pacman_y / CELL_SIZE;
            shortest_distance1 = shortestPath(startX, startY, destX, destY, gameMap);
        }
        cout << shortest_distance1 << " " << shortest_distance2 << " " << shortest_distance3 << " " << shortest_distance4 << endl;
        int final = min(shortest_distance1, min(shortest_distance2, min(shortest_distance4, shortest_distance3)));

        // if (final  != 222220) {
        // cout << "Shortest distance: " << final << endl;
        //} else {
        //    cout << "No path found" << endl;
        //}
        int directionX = 0;
        int directionY = 0;
        if (final == shortest_distance1 && final != 222220)
        {
            directionX = 1;
            ghost->direction = 4;
        }
        else if (final == shortest_distance2 && final != 222220)
        {
            directionX = -1;
            ghost->direction = 3;
        }
        else if (final == shortest_distance3 && final != 222220)
        {
            directionY = -1;
            ghost->direction = 1;
        }
        else if (final == shortest_distance4 && final != 222220)
        {
            directionY = 1;
            ghost->direction = 2;
        }

        ghost->x = ghost->x + directionX * CELL_SIZE;
        ghost->y = ghost->y + directionY * CELL_SIZE;
        // cout<<ghost->x<<" "<<ghost->y<<endl;
        usleep(100000); // Adjust the sleep duration as needed
    }
    pthread_exit(NULL);
}
*/